// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RAP.Persistence.Primary;

namespace RAP.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20200929030211_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("RAP.Persistence.Primary.Entities.PostRecurrenceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Body")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<ulong>("IntervalSeconds")
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTimeOffset>("LastPost")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset>("NextPost")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("RedditUserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Subreddits")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("RedditUserId");

                    b.ToTable("PostRecurrences");
                });

            modelBuilder.Entity("RAP.Persistence.Primary.Entities.RedditUserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AccessToken")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RedditUsername")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Scope")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTimeOffset>("TokenExpiresAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("RedditUsers");
                });

            modelBuilder.Entity("RAP.Persistence.Primary.Entities.PostRecurrenceEntity", b =>
                {
                    b.HasOne("RAP.Persistence.Primary.Entities.RedditUserEntity", "RedditUser")
                        .WithMany()
                        .HasForeignKey("RedditUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
